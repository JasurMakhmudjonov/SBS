generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLES {
  USER
  OWNER
  ADMIN
  SUPERADMIN
}

enum PITCHTYPE {
  NATURAL_GRASS
  HYBRID_GRASS
  ARTIFICIAL_GRASS
}

enum VENUETYPE {
  OUTDOOR
  INDOOR
}

enum BOOKINGSTATUS {
  PENDING
  CONFIRMED
  CANCELLED
}

model Users {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fullname     String
  phone_number String    @unique
  password     String
  role         ROLES     @default(USER)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  
  fields     Field[] @relation("FieldOwners")
  reviews    Reviews[] @relation("ReviewUsers")
  bookings   Booking[]

  @@index([role])
}

model Country {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  regions   Region[]

  @@index([name])
}

model Region {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  districts District[]

  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  countryId String  @db.Uuid

  @@index([name])
  @@index([countryId])
}

model District {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String    
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  fields    Field[]

  region   Region @relation(fields: [regionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  regionId String @db.Uuid

  @@index([name])
  @@index([regionId])
}

model SportCategory {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  fields    Field[]

  @@index([name])
}

model Field {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  description  String
  rating       Int       @default(5)
  image        String[]
  opening_time DateTime
  closing_time DateTime
  pitch_type   PITCHTYPE
  venue_type   VENUETYPE
  location     Json
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  categoryId String        @db.Uuid
  category   SportCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  districtId String   @db.Uuid
  district   District @relation(fields: [districtId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  ownerId String @db.Uuid
  owner   Users  @relation("FieldOwners", fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  reviews  Reviews[]
  bookings Booking[]

  @@index([name])
  @@index([categoryId])
  @@index([districtId])
  @@index([ownerId])
}

model Reviews {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rating    Int
  comment   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  fieldId String  @db.Uuid
  field   Field @relation(fields: [fieldId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  userId String  @db.Uuid
  user   Users   @relation("ReviewUsers", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([fieldId])
  @@index([userId])
}




model Booking {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  booking_date DateTime
  start_time   DateTime
  end_time     DateTime
  status       BOOKINGSTATUS @default(PENDING)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?

  userId String @db.Uuid
  user   Users  @relation(fields: [userId], references: [id], onDelete:Cascade, onUpdate: NoAction)

  fieldId String  @db.Uuid
  field   Field   @relation(fields: [fieldId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId])
  @@index([fieldId])
  @@index([booking_date])
  @@index([status])
}
